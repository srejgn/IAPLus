* Encoding: windows-1252.
* 
* Version 2022 09 01.
* 
* Please report bugs to: egonzalez@ets.org or eugene.gonzalez@iea-hamburg.de.
*
* About the program: This program computes a battery of item and scale related statistics and saves the output 
*                    to CSV files. It computes these statistics overall across the entire dataset, and 
*                    for each of the groups created with the unique combinations of CLASSVARS and BYVAR.
*.
* For more information, please refer to the User Manual.
*. 
define !IAPlus  (indir        = !charend('/')             /
                 infile       = !charend('/')             /
                 outdir       = !charend('/')             /
                 outfile      = !charend('/')             /
                 selvar       = !charend('/')             /
                 selcrit      = !charend('/')             /
                 sample       = !charend('/')             /
                 seed         = !charend('/') !default(random) /
                 scale        = !charend('/')             /
                 scalelbl     = !charend('/') !default('No label provided')  /
                 items        = !charend('/')             /
                 keys         = !charend('/')             /
                 IsZero       = !charend('/') !default(" 0 thru 9") /
                 IsOne        = !charend('/') !default("10 thru 19") /
                 IsTwo        = !charend('/') !default("20 thru 29") /
                 IsThree      = !charend('/') !default("30 thru 39") /
                 IsFour       = !charend('/') !default("40 thru 49") /
                 IsFive       = !charend('/') !default("50 thru 59") /
                 maxscrs      = !charend('/')             /
                 downcode     = !charend('/') !default(N) /
                 reverse      = !charend('/')             /
                 minrscore    = !charend('/') !default(1) /
                 atleast      = !charend('/') !default(1) /
                 Omit         = !charend('/')             /
                 OmitAs       = !charend('/') !default(sysmis) /
                 NotReach     = !charend('/')             /
                 NotReachAs   = !charend('/') !default(sysmis) /
                 OtherMis     = !charend('/')             /
                 OtherMisAs   = !charend('/') !default(sysmis) /
                 NotAdmin     = !charend('/')             /
                 classvars    = !charend('/')             /
                 byvars       = !charend('/')             /
                 NullByVar    = !charend('/') !default(N) /
                 idvars       = !charend('/')             /
                 keepvars     = !charend('/')             /
                 CritVar      = !charend('/')             /
                 UseSumScr    = !charend('/') !default(N) /
                 wgtvar       = !charend('/')             /
                 normwgt      = !charend('/') !default(N) /
                 BiserialN    = !charend('/') !default(5) /
                 DoDIF        = !charend('/') !default(Y) /
                 nLevels      = !charend('/') !default(6) /
                 IRTCuts      = !charend('/')             /
                 qcscoring    = !charend('/') !default(Y) /
                 ChkStrtLn    = !charend('/') !default(N) /
                 ChkCriteria  = !charend('/') !default(Y) /
                 factor       = !charend('/') !default(N) /
                 fextract     = !charend('/') !default(PC)/
                 frotate      = !charend('/') !default(VARIMAX) /
                 timestamp    = !charend('/') !default(Y) /
                 sourcestamp  = !charend('/') !default(Y) /
                 dotables     = !charend('/') !default(Y) /
                 graphn       = !charend('/') !default(10)/ 
                 viewcod      = !charend('/') !default(N) /
                 clean        = !charend('/') !default(Y) /
                 DoHTML       = !charend('/') !default(Y) /
                 DoXLSX       = !charend('/') !default(Y) /
                 DoIRT        = !charend('/') !default(N) /
                 Maxiter      = !charend('/') !default(1000)   /
                 IrtModel     = !charend('/') !default('1PL')  /
                 Regressors   = !charend('/')                  /
                 npvs         = !charend('/') !default(20)     /
                 SampRegr     = !charend('/') !default(FALSE)  /
                 ScoreType    = !charend('/') !default(WLE)    /
                 CtrDiff      = !charend('/') !default(Y)      /
                 WhereIsR     = !charend('/') !default("C:\Program Files\R\R-4.1.2\bin") /
                 SaveRData    = !charend('/') !default(N)      ).

preserve.
omsend tag = ALL.

OMS  / SELECT ALL
     / IF COMMANDS=['Alter Type' 'Variables to Cases']
     / DESTINATION VIEWER=NO.

* If viewcode is selected.
!if (!upcase(!viewcod)=Y) !then
set mprint=on  printback=on.
!else
set mprint=off printback=off.
!ifend

set olang=English locale=English unicode=no.
set onumbers=values ovatrs=names tnumbers=LABELS tvars=names.

dataset close all.
new file.
output close all.
output new name = !outfile.

* pick first and last item.
!let !firstitem = !head(!items)
!do !i !in(!items)
!let !lastitem = !i
!doend

* create a list with the variables used as criteria.
!let !critvars = !null
!if (!scale !ne !null) !then
!if (!upcase(!UseSumScr) = Y) !then
!let !critvars = !concat(!critvars,!blank(1),!scale,"_sumscr ")
!ifend
!let !critvars = !concat(!critvars,!blank(1),!scale,"_pplus",!blank(1),!critvar)
!else
!let !critvars = !critvar
!ifend

* create lists with all the classification variables. this gets re-created later.
!let !allcv  = !concat(!classvars,!blank(1),!byvars)
!let !allcv2 = !null
!do !cv !in(!allcv)
!let !allcv2 = !concat(!allcv2,!blank(1),!upcase(!cv),"_n")
!doend

* Get file with analysis variables and score the items.
echo "* * *".
echo "Retrieving file with the analysis variables".
echo "* * *".
get file = !quote(!concat(!unquote(!indir),"\",!infile,".sav"))
  / keep = !idvars !keepvars !classvars !byvars !items !wgtvar !critvar !selvar !regressors.
weight off.

compute CaseSeq = $casenum.
execute.

* Check if weight variable was specified, if not create one called WGTVAR such that wgt = 1 for all cases.
!if (!wgtvar = !null) !then
!let !wgt = WgtVar.
compute WgtVar = 1.
!else
!let !wgt = !wgtvar.
!ifend
select if (!wgt > 0).

* Select cases according to selection criteria.
!if (!selcrit !ne !null) !then
select if (!selcrit).
!ifend

* Select a proportion of the sample if specified.
!if (!sample !ne !null) !then
set seed = !seed.
sample !sample.
!ifend

* Compute a constant for later use and to trigger dictionary output.
compute k = 1.
variable labels k "Constant Variable".
value labels k 1 "Constant Value (1)".

* flag cases with same response for all items.
* these are used later for the RespType type variable.
!if (!upcase(!ChkStrtLn) = Y) !then
compute !concat(!scale,"_SameResponses") = 0.
if (!concat("var.",!atleast)( !firstitem to !lastitem ) = 0) !concat(!scale,"_SameResponses") = 1.
execute.
*freq var = !concat(!scale,"_SameResponses").
!ifend

echo "* * *".
echo "Retrieving Labels".
echo "* * *".

oms / select all
    / IF COMMANDS=['File Information'] SUBTYPES=['Variable Information']
    / DESTINATION FORMAT = SAV OUTFILE = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Var_Labels.sav")) viewer=no
    / tag = 'filevars'.
oms / select all
    / IF COMMANDS=['File Information'] SUBTYPES=['Variable Values']
    / DESTINATION FORMAT = SAV OUTFILE = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Val_Labels.sav")) viewer=no
    / tag = 'filevalues'.
display dictionary / var = k !items.
omsend tag= ['filevars' 'filevalues'].

* Eliminates assignment as missing values.
missing values !items ().

* For QC, show frequencies of classvars and byvar.
* Recode to numbers so they can later be merged. Allows for using STRING class and by vars.
echo "* * *".
echo "Creating groups for the analysis".
echo "* * *".
!if (!allcv2 !ne !null) !then
autorecode !allcv / into !allcv2.
!ifend

!if (!scale !eq !null) !then
recode !items (sysmis = -999)
       !if (!NotAdmin !ne !null) !then !do !nad !in(!NotAdmin) (!nad = -999) !doend !ifend
       (else = copy).
!ifend

!if (!scale !ne !null) !then
echo "* * *".
echo "Recoding the items...".
echo "* * *".

* create target variables.
numeric !do !i !in (!items) !concat(!i,"_s") !doend (f2.0).
numeric !do !i !in (!items) !concat(!i,"_p") !doend (f4.2).

* Recode items (correct/incorrect), calculate p+ and compute SumScr using p+. 
!let !itmlist = !items
!let !keylist = !keys
!let !scrlist = !maxscrs
!let !revlist = !reverse

!do !i !in (!items)
!let !item   = !upcase(!head(!itmlist))
!let !key    = !upcase(!head(!keylist))
!let !maxscr = !head(!scrlist)
!let !rev    = !upcase(!head(!revlist))

recode !item (sysmis = -999)
       !if (!NotAdmin !ne !null) !then !do !nad !in(!NotAdmin) (!nad = -999) !doend !ifend
       (else = copy).

!if (!upcase(!key) !eq X !or !key !eq !null) !then
recode !item
       !if (!Omit     !ne !null) !then !do !omi !in(!Omit)     (!omi = !OmitAs)     !doend !ifend
       !if (!NotReach !ne !null) !then !do !nre !in(!NotReach) (!nre = !NotReachAs) !doend !ifend
       !if (!OtherMis !ne !null) !then !do !otm !in(!OtherMis) (!otm = !OtherMisAs) !doend !ifend
       (-999 = sysmis) (else = copy) into !concat(!item,"_s").
!else !if (!upcase(!key) = D) !then
recode !item
       !if (!Omit     !ne !null) !then !do !omi !in(!Omit)     (!omi = !OmitAs)     !doend !ifend
       !if (!NotReach !ne !null) !then !do !nre !in(!NotReach) (!nre = !NotReachAs) !doend !ifend
       !if (!OtherMis !ne !null) !then !do !otm !in(!OtherMis) (!otm = !OtherMisAs) !doend !ifend
       !if (!IsZero   !ne !null) !then (!IsZero  = 0)  !ifend
       !if (!IsOne    !ne !null) !then (!IsOne   = 1)  !ifend
       !if (!IsTwo    !ne !null) !then (!IsTwo   = 2)  !ifend
       !if (!IsThree  !ne !null) !then (!IsThree = 3)  !ifend
       !if (!IsFour   !ne !null) !then (!IsFour  = 4)  !ifend
       !if (!IsFive   !ne !null) !then (!IsFive  = 5)  !ifend
       (-999 = sysmis) into !concat(!item,"_s").
!else
recode !item (!key = 1)
       !if (!Omit     !ne !null) !then !do !omi !in(!Omit)     (!omi = !OmitAs)     !doend !ifend
       !if (!NotReach !ne !null) !then !do !nre !in(!NotReach) (!nre = !NotReachAs) !doend !ifend
       !if (!OtherMis !ne !null) !then !do !otm !in(!OtherMis) (!otm = !OtherMisAs) !doend !ifend
       (-999 = sysmis)
       (else = 0)    into !concat(!item,"_s").
!ifend
!ifend

!if (!maxscr !ne !null) !then
!if (!upcase(!rev) !eq Y) !then
compute !concat(!item,"_s") = ((!maxscr + !minrscore) - !concat(!item,"_s")).
compute !concat(!item,"_p") = !concat(!item,"_s") / !maxscr.
!else
compute !concat(!item,"_p") = !concat(!item,"_s") / !maxscr.
!ifend
!else
compute !concat(!item,"_p") = !concat(!item,"_s") / 1.
!ifend

!let !itmlist = !tail(!itmlist)
!let !keylist = !tail(!keylist)
!let !scrlist = !tail(!scrlist)
!let !revlist = !tail(!revlist)
!doend
!else
!do !item !in (!items)
recode !item
       !if (!Omit     !ne !null) !then !do !omi !in(!Omit)     (!omi = !OmitAs)     !doend !ifend
       !if (!NotReach !ne !null) !then !do !nre !in(!NotReach) (!nre = !NotReachAs) !doend !ifend
       !if (!OtherMis !ne !null) !then !do !otm !in(!OtherMis) (!otm = !OtherMisAs) !doend !ifend
       (-999 = sysmis) (else = copy) into !concat(!item,"_s").
compute !concat(!item,"_p") = !concat(!item,"_s").
!doend
!ifend

* This computes the number of items.
!let !nitems  = !null
!do !i !in (!items)
!let !nitems = !concat(!nitems,i)
!doend
!let !nitems = !length(!nitems)

!if (!upcase(!qcscoring)=Y !and (!scale !ne !null)) !then
echo "* * *".
echo "Check recoding of the items.".
echo "* * *".
!do !i !in(!items)
cross table = !concat(!i,"_s") !concat(!i,"_p") by !i / missing = include.
!doend
!ifend

title "Check min/max for all items overall".
desc var = !do !i !in(!items) !concat(!i,"_p") !doend.
execute.
OMS / SELECT TABLES / IF COMMANDS = ["Descriptives"] SUBTYPES = ["Descriptive Statistics"]
    / DESTINATION FORMAT = SAV OUTFILE = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Desc.sav")) viewer = yes
    / tag = 'descriptives'.
desc var = !do !i !in(!items) !concat(!i,"_s") !doend.
omsend tag = ['descriptives'].

!if (!scale !ne !null) !then
compute !concat(!scale,"_taken") = nvalid( !concat(!firstitem,"_p") to !concat(!lastitem,"_p")) .
compute !concat(!scale,"_use") = 1.
format !concat(!scale,"_taken") (f3.0) !concat(!scale,"_use") (f1.0).
if (!concat(!scale,"_taken") < !if (!atleast !ne !null) !then !atleast !else 1 !ifend ) !concat(!scale,"_use") = 0.

* check response quality.
numeric !concat(!scale,"_RespType") (f2.0).
do if (!concat(!scale,"_taken")) = 0.
compute !concat(!scale,"_RespType") = 0.
else if (!concat(!scale,"_use")) = 0.
compute !concat(!scale,"_RespType") = 1.
!if (!upcase(!ChkStrtLn) = Y) !then
else if (!concat(!scale,"_sameresponses") = 1).
compute !concat(!scale,"_RespType") = 2.
!ifend
else.
compute !concat(!scale,"_RespType") = 3.
end if.
value labels !concat(!scale,"_RespType") 0 "No valid responses"
                                         1 !quote(!concat("Fewer than ",!atleast," responses"))
                                         2 "All responses the same"
                                         3 "Other".
set tnumbers = labels.
!if (!byvars = !null) !then
freq var = !concat(!scale,"_RespType").
!else
!do !bv !in(!byvars)
crosstabs table = !bv by !concat(!scale,"_RespType") / cell = count rowpercent.
!doend
!ifend

set tnumbers = values.

echo "* * *".
echo "Cases that will be used based on ATLEAST parameter.".
echo "* * *".
crosstabs table = !concat(!scale,"_taken") by !concat(!scale,"_use").

do if !concat(!scale,"_use") = 1.
compute !concat(!scale,"_sumscr") = sum(!do !i !in(!items) !concat(!i,"_s"), !doend k ) - 1.
compute !concat(!scale,"_pplus") = (sum(!do !i !in(!items) !concat(!i,"_p"), !doend k ) - 1) / !concat(!scale,"_taken").
end if.

format !concat(!scale,"_sumscr") (f4.0).
compute !concat(!scale,"_pplusRND") =rnd(!concat(!scale,"_pplus"),0.01). 

variable labels
   !concat(!scale,"_taken" ) !quote(!concat(!scale,": Items Taken" ))   /
   !concat(!scale,"_sumscr") !quote(!concat(!scale,": Sum Score"))      /
   !concat(!scale,"_pplus" ) !quote(!concat(!scale,": P_plus" ))        .

echo "* * *".
echo "Frequency distribution for the sum score and p-plus score.".
echo "* * *".
freq var = !concat(!scale,"_sumscr") !concat(!scale,"_pplusRND") / histogram = normal.
!ifend

* Save a file with CTT scores and scored items.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Scored.sav")).

* Arrange the file with the labels.
* These labels are done this way to account for no labels in the file.
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Var_Labels.sav"))
    / rename=(var1 label = item Var_Label) 
    / keep = item Var_Label.
alter type item(a32) Var_Label (a128).
compute Item = upcase(item).
recode Var_Label ("<none>" = "<none provided>") (else = copy).

* Add KEY and REV info to the file.
string Reverse (a2).
!let !itmlist = !items
!let !keylist = !keys
!let !scrlist = !maxscrs
!let !revlist = !reverse

!do !ISeq = 1 !to !nitems
!let !item   = !upcase(!head(!itmlist))
!let !key    = !upcase(!head(!keylist))
!let !rev    = !upcase(!head(!revlist))

do if (upcase(item) = !quote(!item)).
compute ISeq = !Iseq.
!if (!key = !null !or !upcase(!key) = X) !then 
compute Key = -1.
!else !if(!upcase(!key) = D) !then
compute Key = -2.
!else
compute Key = !key.
!ifend
!ifend

!if (!rev = !null) !then 
compute Reverse = "N".
!else
compute Reverse = !quote(!rev).
!ifend
end if. 

!let !itmlist = !tail(!itmlist)
!let !keylist = !tail(!keylist)
!let !revlist = !tail(!revlist)
!doend
format Key (f2.0) ISeq (f3.0).
sort cases by Item.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Var_Labels.sav")).

get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Val_Labels.sav"))
    / rename=(var1 var2 label = Item Response Val_Label)
    / keep = Item Response Val_Label.
alter type item(a32) Val_Label(a64).
sort cases by Item Response.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Val_Labels.sav")).

* this is where the IRT portion starts.
!let !IRTScore = !null
!if (!upcase(!DoIRT)=Y !and (!scale !ne !null)) !then

get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Scored.sav")).

* This computes the maximum number of steps across all items.
* Used to read in IRT item parameters from TAM.
!let !maxscr = 1
!do !nc !in(!maxscrs)
!if (!nc !gt !maxscr) !then 
!let !maxscr = !nc 
!ifend
!doend
!if (!upcase(!downcode)=Y) !then
!let !nsteps = !length(!substr(!blank(!maxscr),2))
!else
!let !nsteps = !length(!blank(!maxscr))
!ifend
echo "* * *".
echo !quote(!concat("Max number of steps is ",!nsteps)).
echo "* * *".

* This section is to downcode scored responses for IRT processing with TAM.
* Downcoded responses are only saved for use by TAM.
!if (!upcase(!downcode) = Y) !then
!do !i !in(!items)
compute !concat(!i,"_s") = !concat(!i,"_s") - 1.
!doend
!ifend

* Normalize the weights, if requested.
!if (!upcase(!normwgt) = Y !and !classvars !ne !null) !then
aggregate outfile = *  mode = addvariables
 / break = k !concat(!scale,"_use") !classvars
 / tmptsumwgt = sum(!wgt).
execute.
compute pwgt = 100 * (!wgt / tmptsumwgt).
!else
compute pwgt = !wgt.
!ifend

* this saves the response file for TAM.
temporary.
select if (!concat(!scale,"_use") = 1).
save translate
  / outfile= !quote(!concat(!unquote(!outdir),"\",!outfile,"_Responses.csv"))
  / replace  / type = csv
  / keep = !do !i !in(!items) !concat(!i,"_s") !doend
           CaseSeq pwgt !wgt !idvars !classvars !byvars !allcv2
           !concat(!scale,"_sumscr",!blank(1),!scale,"_pplus",!blank(1),!scale,"_taken")
  / rename = (!do !i !in(!items) !concat(!i,"_s") !doend = !do !i !in(!items) !i !doend)
  / fieldnames / encoding = 'LOCALE'.
execute.

!if (!regressors !ne !null) !then
temporary.
select if (!concat(!scale,"_use") = 1).
save translate
  / outfile= !quote(!concat(!unquote(!outdir),"\",!outfile,"_Regressors.csv"))
  / replace  / type = csv
  / keep = !regressors
  / fieldnames / encoding = 'LOCALE'.
execute.
!ifend

!let !Y = !null
!if (!regressors !ne !null) !then
!let !Y = " Y = regressors,"
!ifend

* creates code for TAM.
select if ($casenum = 1).
string wd (!concat(a,!length(!unquote(!outdir)))).
compute wd = replace(!quote(!unquote(!outdir)),"\","/").
write outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_TAMcode.R"))
  / !quote(!concat('# R Code to do IRT analysis for scale ',!scale)) 
  // '# clean up the environment' 
  / 'rm(list=ls())'
  // '# load packages as necessary'
  / 'if(!require("TAM")){install.packages("TAM")}'
  / 'library("TAM")'
  // '# set working directory and delete existing files'
  / 'setwd("' wd '")'
  / !quote(!concat('if (file.exists("',!outfile,'_PersonScores.csv")) {file.remove("',!outfile,'_PersonScores.csv")}'))
  / !quote(!concat('if (file.exists("',!outfile,'_IRTStats.csv")) {file.remove("',!outfile,'_IRTStats.csv")}'))
  / !quote(!concat('if (file.exists("',!outfile,'.RData")) {file.remove("',!outfile,'.RData")}'))
  // '# read the data'
  / !quote(!concat('responses <- read.csv("',!outfile,'_responses.csv")'))
  !if (!regressors !ne !null) !then
  / !quote(!concat('regressors <- read.csv("',!outfile,'_regressors.csv")'))
  !ifend
  // '# checks for all NA and constant responses and eliminate these items'
  / !quote(!concat('WhichAreNA <- sapply(X = responses[1:',!nitems,'], FUN = function(i) {all(is.na(i))})'))
  / 'AreNotNA <- names(Filter(isFALSE, WhichAreNA))'
  / 'ColVariance <- (sapply(X = responses[,AreNotNA], FUN = function(i) {var(x = i, na.rm=TRUE)}))'
  / 'UseTheseItems <- names(ColVariance[ColVariance > 0])'
  // 'message("\nThese items were taken out because of NO responses.")'
  / 'print(names(Filter(isTRUE,WhichAreNA)))'
  // 'message("\nThese items were taken out because of NO variance.")'
  / 'print(names(ColVariance[ColVariance == 0]))'
  !if (!upcase(!IrtModel) = "1PL") !then
  // '# run 1 pl model'
  / !quote(!concat(!scale,' <- TAM::tam.mml(responses[,UseTheseItems], irtmodel="PCM",', !Y, ' pweights=responses$pwgt,'))
  / !quote(!concat('     pid=responses$CaseSeq,control=list(nodes=seq(-4, 4, len=41), convD=.001, conv=.001, convM=.001, maxiter=',!maxiter,'))'))
  !ifend
  !if (!upcase(!IrtModel) = "2PL") !then
  // '# run 2 pl model'
  / !quote(!concat(!scale,' <- TAM::tam.mml.2pl(responses[,UseTheseItems], irtmodel="GPCM",', !Y, ' pweights=responses$pwgt,'))
  / !quote(!concat('     pid=responses$CaseSeq,control=list(nodes=seq(-4, 4, len=41), convD=.001, conv=.001, convM=.001, maxiter=',!maxiter,'))'))
  !ifend
  // '# write item parameters to a csv file'
  / !quote(!concat('write.csv(',!scale,'$item_irt,"',!outfile,'_IRTstats.csv", row.names = FALSE)'))
  // '# calculate wle and person fit'
  / !quote(!concat('abilities<- tam.wle(',!scale,')'))
  / !quote(!concat('pfit<-tam.personfit(',!scale,')'))
  / !quote(!concat('personstats<-cbind(',!scale,'$person, abilities[5:6], pfit)'))
  !if (!regressors !ne !null) !then
  // '# write out gammas and compute PVs'
  / !quote(!concat('write.csv(',!scale,'$beta,"',!outfile,'_Gammas.csv", row.names = FALSE)'))
  / !quote(!concat('pvs<- tam.pv(',!scale,', nplausible = ', !npvs, ', samp.regr= ',!upcase(!sampregr),', normal.approx = TRUE, ntheta = 200)'))
  / !quote(!concat('personstats<-cbind(personstats,pvs$pv[,-1])'))
  !ifend
  // '# write out person statistics'
  / !quote(!concat('write.csv(personstats,"',!outfile,'_PersonScores.csv", row.names = FALSE)'))
  !do !g !in (!upcase(!byvars))
  // !quote(!concat('#run the analysis using grouping variable ',!g))
  !if (!upcase(!IrtModel) = "1PL") !then
  / !quote(!concat(!scale,'_',!g,'     <- TAM::tam.mml(responses[,UseTheseItems], irtmodel="PCM" , group = responses$', !g, '_n, ', ' pweights=responses$pwgt,'))
  / !quote(!concat('     pid=responses$CaseSeq,control=list(nodes=seq(-4, 4, len=41), convD=.001, conv=.001, convM=.001, maxiter=',!maxiter,'))'))
  !ifend
  !if (!upcase(!IrtModel) = "2PL") !then
  / !quote(!concat(!scale,'_',!g,' <- TAM::tam.mml.2pl(responses[,UseTheseItems], irtmodel="GPCM", group = responses$', !g, '_n, ', ' pweights=responses$pwgt,'))
  / !quote(!concat('     pid=responses$CaseSeq,control=list(nodes=seq(-4, 4, len=41), convD=.001, conv=.001, convM=.001, maxiter=',!maxiter,'))'))
  !ifend
  /
  / '#write item parameters'
  / !quote(!concat('write.csv(',!scale,'_',!g,'$item_irt,"',!outfile,'_',!g,'_IRTstats.csv", row.names = FALSE)'))
  /
  / '# calculate and write item fit statistics'
  / !quote(!concat('ItemFit_',!g,'<-IRT.itemfit(',!scale,'_',!g,')'))
  /
  / '#count cases by group'
  / !quote(!concat('Nof',!g,' <- aggregate(responses$',!g,',list(responses$',!g,'_n, responses$',!g,'),FUN = length)'))
  /
  / '# transform RMSD table'
  / !quote(!concat('# RMSD_',!g,'<- ItemFit_',!g,'$RMSD'))
  / !quote(!concat('# RMSD_',!g,'<- lapply(names(RMSD_',!g,'[2:ncol(RMSD_',!g,')]), function(i) {'))
  / !quote(!concat('# tmp <- data.frame(cbind(RMSD_',!g,'[[1]], i, RMSD_',!g,'[[i]]))'))
  / !quote(!concat('# colnames(tmp) <- c(names(RMSD_',!g,')[1], "Group", "RMSD")'))            
  / !quote(!concat('# return(tmp)'))
  / '#  })'
  / !quote(!concat('# RMSD_',!g,' <- do.call("rbind", RMSD_',!g,')'))
  /
  / !quote(!concat('# RMSD_',!g,'$item  <- substr(','RMSD_',!g,'$item,1,nchar(RMSD_',!g,'$item)-2)'))
  / !quote(!concat('# RMSD_',!g,'$',!g,'_n <- as.numeric(substr(RMSD_',!g,'$Group,6,10))'))
  / !quote(!concat('# RMSD_',!g,'$',!g,'<-Nof',!g,'[RMSD_',!g,'$',!g,'_n,2]'))
  / !quote(!concat('# write.csv(RMSD_',!g,',"',!outfile,'_',!g,'_RMSD.csv", row.names = FALSE)'))
  /
  / '# transform MD table'
  / !quote(!concat('# MD_',!g,'<- ItemFit_',!g,'$MD'))
  / !quote(!concat('# MD_',!g,'<- lapply(names(MD_',!g,'[2:ncol(MD_',!g,')]), function(i) {'))
  / !quote(!concat('# tmp <- data.frame(cbind(MD_',!g,'[[1]], i, MD_',!g,'[[i]]))'))
  / !quote(!concat('# colnames(tmp) <- c(names(MD_',!g,')[1], "Group", "MD")'))            
  / !quote(!concat('# return(tmp)'))
  / '#  })'
  / !quote(!concat('# MD_',!g,' <- do.call("rbind", MD_',!g,')'))
  /
  / !quote(!concat('# MD_',!g,'$item  <- substr(','MD_',!g,'$item,1,nchar(MD_',!g,'$item)-2)'))
  / !quote(!concat('# MD_',!g,'$',!g,'_n<- as.numeric(substr(MD_',!g,'$Group,6,10))'))
  / !quote(!concat('# MD_',!g,'$',!g,'<-Nof',!g,'[MD_',!g,'$',!g,'_n,2]'))
  / !quote(!concat('# write.csv(MD_',!g,',"',!outfile,'_',!g,'_MD.csv", row.names = FALSE)'))
  / 
  / '#combine RMSD and MD values'
  / !quote(!concat('RMSDMD_',!g,'<-data.frame(matrix(ncol=5,nrow=0))'))
  / !quote(!concat('for (i in 2:(ItemFit_',!g,'$G+1))'))
  / !quote(!concat('  {y<-cbind(ItemFit_',!g,'$RMSD[,1],(i-1), Nof',!g,'[i-1,2],ItemFit_',!g,'$RMSD[,i],ItemFit_',!g,'$MD[,i])'))
  / !quote(!concat('RMSDMD_',!g,'<-rbind(RMSDMD_',!g,',y)'))
  / '  }'
  / !quote(!concat('colnames(RMSDMD_',!g,')<-c("Item","',!g,'_n","',!g,'","RMSD","MD")'))
  / !quote(!concat('WRMSD_',!g,'<- ItemFit_',!g,'$RMSD[,c(1,ncol(ItemFit_',!g,'$RMSD))]'))
  / !quote(!concat('write.csv(RMSDMD_',!g,',"',!outfile,'_',!g,'_RMSDMD.csv", row.names = FALSE)'))
  / !quote(!concat('write.csv(WRMSD_',!g,',"',!outfile,'_',!g,'_WRMSD.csv", row.names = FALSE)'))
  /
  / '# write person scores'
  / !quote(!concat('personstats_',!g,'<-cbind(',!scale,'_',!g,'$person, responses$',!g,', responses$',!g,'_n)'))
  / !quote(!concat('write.csv(personstats_',!g, ',"',!outfile,'_',!g,'_PersonScores.csv", row.names = FALSE)'))
  !doend
  !if (!upcase(!SaveRData) = Y) !then
  /
  / '# save R environment if requested'
  / !quote(!concat('save.image("',!outfile,'.RData")'))
  !ifend
  /
  / '#exit program' 
  /'q("no")'.

execute.

* this runs TAM.
echo "* * *".
echo "Running TAM (See 'Running host...' on the bottom right side of the output window).".
echo "This might take a while. Please be patient.".
echo "* * *".

host command =  [!quote(!concat('"',!unquote(!WhereIsR),'\R.exe" CMD BATCH "',!unquote(!outdir),'\',!outfile,'_TAMcode.R"'))].

* get item parameters from TAM.
get data
  / type = txt
  / file =!quote(!concat(!unquote(!outdir),"\",!outfile,"_IRTstats.csv"))
  / delimiters  = ","
  / qualifier   = '"'
  / arrangement = delimited
  / firstcase   = 2
  / importcase  = all
  / variables   = item a32 Alpha f9.6 Beta f9.6
     !if (!nsteps !gt 1) !then
     !do !s=1 !to !nsteps !concat("tauCat",!s," f9.6 ") !doend
     !ifend.

compute item = upcase(item).
compute k = 1.
aggregate outfile = * mode=addvariables
  / shift = mean(Beta).

!if (!upcase(!CtrDiff) = Y) !then
rename variables (Beta = oBeta).
compute Beta = oBeta - Shift.
!ifend
execute.
title "Item parameters from TAM".
*sort cases by $casenum.
list vars = all.

sort cases by item.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_IRTStats.sav")).

echo "* * *".
echo "Descriptive statistics for item parameters from TAM.".
echo "* * *".
desc var = Alpha Beta !if (!upcase(!CtrDiff) = Y) !then oBeta !ifend.

* this is to center the difficulty at zero.
!if (!upcase(!CtrDiff) = Y) !then
aggregate outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_IRTstatsShift.sav"))
  / break = k
  / shift = mean(shift).
!ifend

* get person scores from TAM.
get data
  / type = txt
  / file =!quote(!concat(!unquote(!outdir),"\",!outfile,"_PersonScores.csv"))
  / delimiters  = ","
  / qualifier   = '"'
  / arrangement = delimited
  / firstcase   = 2
  / importcase  = all
  / variables   = CaseSeq f8.0  TAMcase f5.0
                  TAMweight f9.5 TAMsumscore f5.0 TAMmaxscore f5.0
                  !concat(!scale,"_EAP") f9.5 !concat(!scale,"_EAP.se") f9.5
                  !concat(!scale,"_WLE") f9.5 !concat(!scale,"_WLE.se") f9.5 
                  outfit f9.5 outfit_t f9.5 infit f9.5 infit_t f9.5
  !if (!regressors !ne !null) !then !do !pv = 1 !to !npvs !concat(!scale,"_PV",!pv) f9.5 !doend !ifend .
execute.

save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_PersonScores.sav")) .

!if (!upcase(!CtrDiff) = Y) !then
compute k = 1.
match files
  / file = *
  / table = !quote(!concat(!unquote(!outdir),"\",!outfile,"_IRTStatsShift.sav"))
     / by k.
rename variables (!concat(!scale,"_EAP") !concat(!scale,"_WLE") = !concat(!scale,"_oEAP") !concat(!scale,"_oWLE")).
compute !concat(!scale,"_EAP") = !concat(!scale,"_oEAP") - shift.
compute !concat(!scale,"_WLE") = !concat(!scale,"_oWLE") - shift.
!ifend

variable lables
    !concat(!scale,"_EAP") !quote(!concat(!scale,": EAP score"))  
    !concat(!scale,"_WLE") !quote(!concat(!scale,": WLE score")).

echo "* * *".
echo "Descriptive statistics for the IRT score variables.".
echo "* * *".
desc var = TAMweight TAMsumscore TAMmaxscore
          !concat(!scale,"_EAP") !concat(!scale,"_EAP.se") 
          !concat(!scale,"_WLE") !concat(!scale,"_WLE.se") .

match files
  / file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Scored.sav")) / in=FromSource
  / file = *  / in=FromTAM
    / by CaseSeq.

* check to see that records from TAM were read in correctly.
crosstabs table = FromTAM by FromSource.

echo "* * *".
echo "Check correlation between sum score, pplus and IRT based scores.".
echo "* * *".
corr var = !concat(!scale,"_sumscr",!blank(1),!scale,"_pplus",!blank(1),!scale,"_wle",!blank(1),!scale,"_eap").

* save the file with the scores.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Scored.sav"))
  / drop = FromTAM FromSource.

!let !IRTScore = !concat(!scale,"_",!ScoreType)
!let !critvars = !concat(!critvars," ",!IRTScore)

* end of the IRT processing.
!ifend

get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Scored.sav")).

* check the criteria.
!if (!upcase(!ChkCriteria)=Y !and !critvar !ne !null) !then
weight by !wgt.
echo "* * *".
echo "Descriptive statistics for the criterion variables.".
echo "* * *".
freq var = !critvar
  / format = limit(10)
  / histogram = normal
  / statistics = mean stddev min max .
corr var = !critvar with !concat(!scale,"_sumscr",!blank(1),!scale,"_pplus") !IRTscore.
weight off.
!ifend

* This section is to do a FA with the set of items. Can be incomplete matrix sampling
* but needs a full correlation matrix. Uses scored items and sample as a whole.
!if (!upcase(!factor) = Y !and (!scale !ne !null)) !then
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Scored.sav")).
select if !concat(!scale,"_use") = 1.
weight by !wgt.
factor var = !concat(!firstitem,"_s") to !concat(!lastitem,"_s")
 / missing = pairwise
 / extraction = !fextract
 / rotation = !frotate.
echo "* * * FA Excluding Straightline Responses * * *". 
select if !concat(!scale,"_RespType") <> 2.
factor var = !concat(!firstitem,"_s") to !concat(!lastitem,"_s")
 / missing = pairwise
 / extraction = !fextract
 / rotation = !frotate.
weight off.
!ifend

* here begins the processing by byvar.

!if (!byvars !eq !null) !then 
!let !bvrs = nobyvar
!ifend

!if (!byvars !ne !null) !then 

!if (!upcase(!nullbyvar) !eq Y) !then
!let !bvrs = !concat(nullbyvar,!blank(1),!byvars)
!ifend
!if (!upcase(!nullbyvar) !eq N) !then
!let !bvrs = !concat(!byvars)
!ifend

!ifend

* start the loop over the byvars.
!do !bvr !in(!bvrs)
!if (!bvr !eq nobyvar !or !bvr !eq nullbyvar) !then
!let !bv=!null
!let !filetag = !null
!else
!let !bv=!bvr
!let !filetag = !upcase(!concat("_",!bvr))

!if (!upcase(!doirt) = Y !and (!scale !ne !null)) !then
get data / type = txt
  / file =!quote(!concat(!unquote(!outdir),"\",!outfile,"_",!bvr,"_RMSDMD.csv"))
  / delimiters  = ","
  / qualifier   = '"'
  / arrangement = delimited
  / firstcase   = 2
  / importcase  = all
  / variables   = item a32 !concat(!bv,"_n") f3.0 v1 a32 RMSD f6.3 MD f6.3.
delete variables v1.
compute item = upcase(item).
sort cases by item !concat(!bv,"_n").
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_",!bvr,"_RMSDMD.sav"))
execute.
get data / type = txt
  / file =!quote(!concat(!unquote(!outdir),"\",!outfile,"_",!bvr,"_WRMSD.csv"))
  / delimiters  = ","
  / qualifier   = '"'
  / arrangement = delimited
  / firstcase   = 2
  / importcase  = all
  / variables   = item a32 WRMSD f13.7 .
compute item = upcase(item).
sort cases by item .
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_",!bvr,"_WRMSD.sav"))
execute.
!ifend
!ifend

!let !allcvars  = !concat(!classvars,!blank(1),!bv)
!let !allcvars2 = !null
!do !cv !in(!allcvars)
!let !allcvars2 = !concat(!allcvars2,!blank(1),!cv,"_n")
!doend

* Count all the classification variables.
!let !q = !NULL
!do !i !in(!allcvars)
!let !q = !concat(!q,"q")
!doend
!let !ncvar = !length(!q)

* Compute statistics item by item.
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Scored.sav")).

*omsend tag = ALL.

sort cases by k !allcvars2 !allcvars.

!if (!scale !ne !null) !then
select if !concat(!scale,"_use") = 1.
!ifend

* compute group means. these are used to compute equated pplus stats.
* this also gets all possible groups in the file.
weight by !wgt.
aggregate outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_GroupValues.sav"))
  / presorted
  / break = k !allcvars2 !allcvars
 !if (!upcase(!DoIRT) = Y !and (!scale !ne !null)) !then
  / Mean_EAP Mean_WLE = mean(!concat(!scale,"_EAP") !concat(!scale,"_WLE"))
 !ifend
  / x = nu(k).
weight off.

!do !crv !in (!critvars)
compute !concat(w,!crv)    = !wgt * !crv.
compute !concat(w,!crv,Sq) = !wgt * !crv**2.
!doend

echo "* * *".
echo "Aggregating over the entire file... This takes some time.".
echo "See the case counter on the bottom right hand side of the screen.".
echo "* * *".
OMS
  /SELECT all 
  /IF COMMANDS=['Means'] SUBTYPES=['Case Processing Summary']
  /DESTINATION VIEWER=no / tag = 'means1'.
OMS
  /SELECT tables
  /IF COMMANDS=['Means'] SUBTYPES=['Report']
  /DESTINATION VIEWER=no format = sav outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_ResponseStats.sav"))
  / tag = 'means2'.

set tnumbers = values.

weight off.
split file by k !allcvars2.
mean tables = k !wgt !do !crv !in (!critvars) !concat(w,!crv," ",w,!crv,Sq) !doend
  by !do !i !in(!items) !i !doend
  / cells = sum.
split file off.
omsend tag=['means1' 'means2'].
execute.

OMS /select all / if commands = ["Correlations"] / destination viewer = no.
OMS /select all / if commands = ["Descriptives"] / destination viewer = no.

set tnumbers = values.

OMS /SELECT tables /IF COMMANDS = ["Correlations"] SUBTYPES = ["Correlations"]
    /DESTINATION FORMAT = SAV OUTFILE = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_Corr.sav")) viewer = no / tag = 'correlations'.
OMS /SELECT tables /IF COMMANDS = ["Correlations"] SUBTYPES = ["Descriptive Statistics"]
    /DESTINATION FORMAT = SAV OUTFILE = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_DescA.sav")) viewer = no / tag = 'descriptives1'.
OMS /SELECT tables /IF COMMANDS = ["Descriptives"] SUBTYPES = ["Descriptive Statistics"]
    /DESTINATION FORMAT = SAV OUTFILE = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_DescB.sav")) viewer = no / tag = 'descriptives2'.

* This gets the discrimination coefficients and descriptive statistics for the items.

echo "* * *".
echo "Calculating discriminations...".
echo "* * *".

split file by k !allcvars2.
weight by !wgt.
corr var = !do !i !in(!items) !concat(!i,"_s") !doend with !critvars
  / statistics = descriptives / missing = pairwise.
weight off.

* This gets unweighted sample size, min and max per item.
desc var = !do !i !in(!items) !concat(!i,"_s") !doend
  /  stats = default.
split file off.

omsend tag=['correlations' 'descriptives1' 'descriptives2'].


* expand group values file so there is one record per item for each group.
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_GroupValues.sav")).
loop ISeq = 1 to !nitems.
xsave outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_GroupValues2.sav")).
end loop.
execute.
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_GroupValues2.sav")) / drop = x.
sort cases by Iseq.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_GroupValues3.sav")).
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Var_Labels.sav")).
sort cases by ISeq.
match files
 / table = *
 / file = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_GroupValues3.sav"))
   / by ISeq.
sort cases by k !allcvars2 item.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_GroupValues4.sav")).

* Process min/max for the items. Done earlier for the entire file in case a min or max does not occur for a group.
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Desc.sav"))
  / keep = var1 Minimum Maximum
  / rename =(var1 Minimum Maximum = Item_s ItemMin ItemMax).
compute NSteps = ItemMax - ItemMin.
recode NSteps (sysmis = 0) (else=copy).
select if rtrim(Item_s) <> "Valid N (listwise)".
string Item(a32).
compute Item = upcase(char.substr(item_s,1,char.length(rtrim(item_s))-2)).
sort cases by item.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_Desc2.sav")) / drop = item_s.

* Process descriptives and discrimination coefficients for the items.
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_DescA.sav"))
  / keep = var1 to !concat(var,!length(!concat(!q,"qq"))) N Mean Std.Deviation
    / rename =(var1 to !concat(var,!length(!concat(!q,"qq"))) Mean N Std.Deviation =
               k !allcvars2 Item_s ItemMean SumWgts ItemStDev).
!do !i !in(!critvars)
select if upcase(Item_s) <> !upcase(!quote(!i)).
!doend
string Item(a32).
compute Item = upcase(char.substr(item_s,1,char.length(rtrim(item_s))-2)).
sort cases by k !allcvars2 item.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_DescA2.sav"))
  / drop = item_s.
execute.

get file = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_DescB.sav"))
  / keep = var1 to !concat(var,!length(!concat(!q,"qq"))) N
    / rename =(var1 to !concat(var,!length(!concat(!q,"qq"))) N =
               k !allcvars2 Item_s ValidCases).
select if rtrim(Item_s) <> "Valid N (listwise)".
string Item(a32).
compute Item = upcase(char.substr(item_s,1,char.length(rtrim(item_s))-2)).
sort cases by k !allcvars2 item.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_DescB2.sav"))
   / drop = item_s.
execute.

get file = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_Corr.sav"))
  / keep = var1 to !concat(var,!length(!concat(!q,"qqq"))) !critvars
    / rename =(var1 to !concat(var,!length(!concat(!q,"qqq"))) !critvars =
               k !allcvars2 Item_s StatType !do !crv !in(!critvars) !concat(CorrW_,!crv) !doend ).
select if StatType = "Pearson Correlation".
string Item(a32).
compute Item = upcase(char.substr(item_s,1,char.length(rtrim(item_s))-2)).
sort cases by k !allcvars2 item.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_Corr.sav")) / drop = item_s StatType.
execute.

echo "* * *".
echo "Creating Summary Statistics...".
echo "* * *".

match files
 / file  = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_Corr.sav"))
 / file  = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_DescA2.sav"))
 / file  = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_DescB2.sav"))
   / by k !allcvars2 Item.
execute.

sort cases by item.
match files
 / file = *
 / table = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_Desc2.sav"))
    / by item.

compute PPlus = ItemMean / ItemMax.

sort cases by k !allcvars2 item.
match files
 / file = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_GroupValues4.sav"))
 / file = *
  / by k !allcvars2 item.

* select if ValidCases > 0.


sort cases by item k !allcvars2.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_SumStats_tmp.sav")).


echo "* * *".
echo "Secondary Processing of the Items".
echo "* * *".
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_ResponseStats.sav"))
  / rename = (k = NCases).
rename variables (var1 to !concat(var,!length(!concat(!q,"qq"))) !wgt = k !allcvars2 ResponseA SumWgt).
string Item(a32).
format NCases (f6.0).
select if (ResponseA ne "Total").
compute Item = upcase(char.substr(Label_,char.index(Label_,"*")+2)).
compute Response = number(ResponseA,f5.0).
aggregate outfile = * mode = addvariables
 / break = k !allcvars2 item
 / nresp = n(Response).
if (nresp = 1) Response = -888.
select if (Response ne -999).
execute.
delete variables !concat(var,!length(!concat(!q,"qqq"))) nresp command_ subtype_ label_ ResponseA.
*save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_ResponseStats2.sav")).

aggregate outfile = * mode = addvariables
  / break = k !allcvars2 item
  / t_SumWgt = sum(SumWgt)
 !do !crv !in (!critvars)
  / !concat(t_w,!crv," ",t_w,!crv,Sq)  = sum(!concat(w,!crv," ",w,!crv,Sq))
 !doend.

do if (NCases > !BiserialN).
!do !crv !in(!critvars)
compute !concat(mn,!crv)   = !concat(w,!crv)   / SumWgt.
compute !concat(t_mn,!crv) = !concat(t_w,!crv) / t_SumWgt.
compute !concat(sd,!crv)   = sqrt(!concat(w,!crv,sq)  / SumWgt   - (!concat(w,!crv)  /SumWgt)**2).
compute !concat(t_sd,!crv) = sqrt(!concat(t_w,!crv,sq)/ t_SumWgt - (!concat(t_w,!crv)/t_SumWgt)**2).
!doend
end if.
*save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_ResponseStats3.sav")).

* Compute statistics for rbis and rpbis.
compute p = SumWgt / t_SumWgt.
compute q = 1 - p.

do if (p > 0.01 and p < 0.99).
compute z = probit(p).
compute density = exp(-1/2 * z**2)/sqrt(2 * 3.14159265).
!do !crv !in(!critvars)
compute !concat(rpb_,!crv) = ((!concat(mn,!crv)-!concat(t_mn,!crv))/!concat(t_sd,!crv)) * sqrt(p/q).
compute !concat(rbi_,!crv) = !concat(rpb_,!crv) * sqrt(p*q) / density.
!doend
end if.

sort cases by item.
match files
 / file  = *
 / table = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Var_Labels.sav"))
   / by item.

compute IsKey = 0.
do if (key < 0).
compute IsKey = 1.
else if (key = Response).
compute IsKey = 1.
end if.
string Criteria (a32).
compute Criteria = !quote(!critvar).
format IsKey (f2.0) Response (f4.1).
value labels Response.
variable label Response "Response Category".

* Merge with correlations.

alter type item(a32).
sort cases by item k !allcvars2.
match file
 / file = *
 / table = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_SumStats_tmp.sav"))
   / by item k !allcvars2.

format PPlus !do !crv !in(!critvars) !concat(CorrW_,!crv) !doend (f5.2).

sort cases by item response.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_ItemStats_tmp.sav")).

match files
   / table = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Var_Labels.sav"))
   / file  = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_ItemStats_tmp.sav"))
    / drop = z density t_SumWgt
         !do !crv !in(!critvars)
            !concat(w,!crv)    !concat(t_w,!crv)
            !concat(mn,!crv)   !concat(t_mn,!crv)
            !concat(sd,!crv)   !concat(t_sd,!crv)
            !concat(w,!crv,Sq) !concat(t_w,!crv,Sq)
         !doend
     / by item .

match files
 / table = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Val_Labels.sav"))
 / file  = *
   / by item response.

* Save item statistics to file.

* Add control variables.
string Scale (a16) / ScaleLbl(a128) / Weight(a8) / Date(a10) / Time(a6) / InDir(a128) / InFile(a64) / SelCrit(a128).
compute weight   = !quote(!wgtvar).
compute scale    = !quote(!scale).
compute scalelbl = !quote(!scalelbl).
compute date     = $date.
compute time     = concat(string(xdate.hour($time),f2.0),'h',string(xdate.minute($time),f2.0),'m').
compute indir    = !quote(!unquote(!indir)).
compute infile   = !quote(!infile).
compute selcrit  = !quote(!selcrit).

var label response "Response Option"
  !do !crv !in(!critvars)
    !concat(CorrW_,!crv) !quote(!concat("Correlation with ",!crv))
    !concat(rbi_,!crv)   !quote(!concat("Biserial (",!crv,")"))
    !concat(rpb_,!crv)   !quote(!concat("Point Biserial (",!crv,")"))
  !doend.

!if (!upcase(!doirt) = Y !and !scale !ne !null !and !bv !ne !null) !then
sort cases by item !concat(!bv,'_n').
match files
 / file = *
 / table = !quote(!concat(!unquote(!outdir),"\",!outfile,"_",!bvr,"_RMSDMD.sav"))
  / by item !concat(!bv,'_n').
!ifend

string splitvar (a128).
compute splitvar = concat(rtrim(var_label), " (", rtrim(item), ") Key (",string(key,f2.0), ") Rev (", rtrim(Reverse), ")" ).
autorecode splitvar / into ItemID.

add files
  / file = *
  / keep = !allcvars all
  / drop = k !allcvars2.
sort cases by iseq item Key Reverse !allcvars.
save translate
  / outfile= !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_ItemStats.csv"))
  / replace  / type = csv 
  / fieldnames / encoding = 'LOCALE'.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_ItemStats.sav")) .

!if (!upcase(!DoIRT)=Y !and (!scale !ne !null)) !then
match file
 / file = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_SumStats_tmp.sav"))
 / table = !quote(!concat(!unquote(!outdir),"\",!outfile,"_IRTstats.sav"))
  !if (!bv !ne !null) !then / table = !quote(!concat(!unquote(!outdir),"\",!outfile,"_",!bv,"_WRMSD.sav"))  !ifend
   / by item.
!else
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_SumStats_tmp.sav"))
!ifend

compute k = 1.
sort cases by k !allcvars2 item.
!if (!upcase(!DoIRT) = Y !and (!scale !ne !null)) !then
match files
 / file = *
 / table = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_GroupValues4.sav"))
   / by k !allcvars2 item.

* calculate equated pplus.

vector POf(!nsteps).
!if (!nsteps !gt 1) !then
vector tau = tauCat1 to !concat("tauCat",!nsteps).
!ifend

do if (nsteps = 1).
compute POf1 = exp(Alpha*(Mean_WLE-Beta)) / (1+exp(Alpha*(Mean_WLE-Beta))).
else.

!if (!nsteps !gt 1) !then
loop #step = 1 to nsteps.
compute #cum1 = 0.0.
loop #s = 1 to #step.
compute #cum1 = #cum1 + (Alpha*(Mean_WLE - Beta + tau(#s))). 
end loop.
compute #numerator = exp(#cum1).

compute #cum3 = 0.0.
loop #s = 1 to nsteps.
compute #cum2 = 0.0.
loop #sx = 1 to #s.
compute #cum2 = #cum2 + (Alpha*(Mean_WLE - Beta + tau(#sx))).
end loop.
compute #cum3 = #cum3 + exp(#cum2).
end loop.
compute #denominator = 1 + #cum3.
compute POf(#step) = #numerator / #denominator.

end loop.
!ifend
end if.

compute EqMean = 0.
loop #step = 1 to nsteps.
compute EqMean = EqMean + #step * POf(#step).
end loop.
compute EqMean  = EqMean + ItemMin.
compute EqPPlus = Eqmean / ItemMax.

!ifend

* Add control variables.
string Scale (a16) / ScaleLbl(a128) / Weight(a8) / Date(a10) / Time(a6) / InDir(a128) / InFile(a64) / SelCrit(a128).
compute weight   = !quote(!wgtvar).
compute scale    = !quote(!scale).
compute scalelbl = !quote(!scalelbl).
compute date     = $date.
compute time     = concat(string(xdate.hour($time),f2.0),'h',string(xdate.minute($time),f2.0),'m').
compute indir    = !quote(!unquote(!indir)).
compute infile   = !quote(!infile).
compute selcrit  = !quote(!selcrit).

!if (!upcase(!doirt) = Y !and !scale !ne !null !and !bv !ne !null) !then
sort cases by item !concat(!bv,'_n').
match files
 / file = *
 / table = !quote(!concat(!unquote(!outdir),"\",!outfile,"_",!bvr,"_RMSDMD.sav"))
  / by item !concat(!bv,'_n').
!ifend

sort cases by ISeq.

string splitvar (a128).
compute splitvar = concat(rtrim(var_label), " (", rtrim(item), ") Key (",string(key,f2.0), ") Rev (", rtrim(Reverse), ")" ).
autorecode splitvar / into ItemID.

add files 
 / file = * 
 / keep = !allcvars all
 / drop = k !allcvars2.

save translate
  / outfile= !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_SumStats.csv"))
  / replace  / type = csv 
  / fieldnames / encoding = 'LOCALE'.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_SumStats.sav")).

** Prepare file for DIF Analysis.
!if (!upcase(!DoDIF) = Y !and !bv !ne !null) !then
echo "* * *".
echo "Preparing file for DIF Analysis".
echo "* * *".

get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Scored.sav")).
!if (!scale !ne !null) !then
select if (!concat(!scale,"_use") = 1).
!ifend

aggregate outfile = *  mode = addvariables
  / !do !cv !in(!critvars) !concat(!cv,"_min") !doend = min(!critvars)
  / !do !cv !in(!critvars) !concat(!cv,"_max") !doend = max(!critvars) .

!do !cv !in(!critvars)
compute !concat(!cv,"_intvl") = (!concat(!cv,"_max") - !concat(!cv,"_min"))/!nLevels.
compute !concat(!cv,"_Level") = -1.
!doend

!do !cv !in(!critvars)
!if (!IRTcuts !eq !null !or !index(!upcase(!cv),!upcase(!concat("_",!ScoreType))) !eq 0) !then
loop i = !nLevels to 1 by -1.
if (!cv >= (!concat(!cv,"_max") - i * !concat(!cv,"_intvl"))) !concat(!cv,"_Level") = !nLevels + 1 - i.
end loop.
!else
!let !q = !null
do
 !do !cut !in(!IRTcuts)
 !let !q = !concat(!q,"q")
   if (!cv < !unquote(!cut)).
compute !concat(!cv,"_Level") = !length(!q).
else
 !doend
 if not(missing(!cv)).
compute !concat(!cv,"_Level") = !length(!q) + 1.
end if.
!ifend
!doend

alter type !do !cv !in(!critvars) !concat(!cv,"_Level") !doend (f2.0).

* Check assignment to groups.
echo "* * *".
echo " Check range of scores within DIF Grouping".
echo "* * *".
set tnumbers = labels.
mean tables !do !cv !in(!critvars) !cv by !concat(!cv,"_Level") / !doend
  cells = min max count.

echo "* * *".
echo " Check number of cases for each DIF group".
echo "* * *".
crosstabs tables !bv by !do !cv !in(!critvars) !concat(!cv,"_Level") !doend 
 / cells = count.

weight by !wgt.
!do !cv !in(!critvars)
aggregate outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_",!cv,!filetag,"_DifData.sav"))
  / break = !bv !concat(!cv,"_Level") !classvars
  / !do !i !in(!items) !concat(!i,"_p") !doend
     = mean(!do !i !in(!items) !concat(!i,"_p") !doend)
  / !concat(!cv,"_NCases")  = nu(!concat(!cv,"_Level"))
  / !concat(!cv,"_SumWgts") = sum(k).
!doend

!do !cv !in(!critvars)
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_",!cv,!filetag,"_DifData.sav")).
varstocases
 / make !concat(!cv,"_PPlus") from !do !i !in (!items) !concat(!i,"_p") !doend
 / index = item (!concat(!cv,"_PPlus")) / null = keep.
execute.
sort cases by item.
alter type item(a32).
compute Item = upcase(char.substr(item,1,char.length(rtrim(item))-2)).
match files
 / table  = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Var_Labels.sav"))
 / file   = *
  / by item.
string Criteria (a32).
compute criteria = !quote(!cv).
rename var (!concat(!cv,"_PPlus") !concat(!cv,"_NCases") !concat(!cv,"_Level") !concat(!cv,"_SumWgts") =
            PPlus NCases Level SumWgts).
format NCases (f6.0).
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_",!cv,!filetag,"_DifData.sav")).
!doend
add files
  !do !cv !in(!critvars)
    file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_",!cv,!filetag,"_DifData.sav"))
  !doend.
variable labels
  Level  "Score level based on criteria"
  NCases  "Number of cases in level"
  PPlus   "Proportion correct on the item"
  SumWgts "Sum of weights".

sort cases by !classvars iseq item key reverse.

string splitvar (a128).
compute splitvar = concat(rtrim(var_label), " (", rtrim(item), ") Key (",string(key,f2.0), ") Rev (", rtrim(Reverse), ")" ).
autorecode splitvar / into ItemID.

save translate
  / outfile= !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_DIF.csv"))
  / replace  / type = csv / fieldnames / encoding = 'LOCALE'.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_DIF.sav")).
execute.
!ifend.
** End of DIF analysis.


** Prepare Item Stats for Graphs.
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_ItemStats.sav"))
  / keep = !classvars !bv iseq item key reverse response NCases PPlus ValidCases SumWgts p
            Val_Label Var_Label
            !do !crv !in(!critvars) !concat(rbi_,!crv) !concat(CorrW_,!crv) !doend
  / rename=(p = P_Choosing).
varstocases
  / make value from P_Choosing !do !crv !in(!critvars) !concat(rbi_,!crv) !concat(CorrW_,!crv) !doend
  / index=stat (value)
  / null = keep.
sort cases by !classvars iseq item Var_Label key reverse.

string stat2 (a64).
variable labels stat2 'Statistic'.
compute stat2 = upcase(stat).
recode stat2 ('P_CHOOSING' = 'Proportion choosing option')
            !do !cv !in(!critvars)
              (!quote(!concat('RBI_',!upcase(!cv))) = !quote(!concat('R Biserial with ',!cv)) ) 
            !doend.

string splitvar (a128).
compute splitvar = concat(rtrim(var_label), " (", rtrim(item), ") Key (",string(key,f2.0), ") Rev (", rtrim(Reverse), ")" ).
autorecode splitvar / into ItemID.

save translate
  / outfile= !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_ItemStats4Graphs.csv"))
  / replace  / type = csv / fieldnames / encoding = 'LOCALE'.
save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_ItemStats4Graphs.sav")).
execute.
** End prepare Item Stats for Graphs.

* Display results in a custom table.
!if (!upcase(!DoTables) = Y) !then
set tnumbers = labels.
!if (!upcase(!DoXLSX) = Y) !then
OMS
  /SELECT Headings Tables Charts
  /IF COMMANDS=['CTables' 'Graph'] SUBTYPES=['Custom Table' 'Graph']
  /DESTINATION VIEWER=yes format = xlsx outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_CTables"))
  /tag = 'ctables1'.
!ifend
!if (!upcase(!DoHTML) = Y) !then
OMS
  /SELECT Headings Tables Charts
  /IF COMMANDS=['CTables' 'Graph'] SUBTYPES=['Custom Table' 'Graph']
  /DESTINATION VIEWER=yes format = html outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_CTables.html"))
  /tag = 'ctables2'.
!ifend
!if (!scale !ne !null) !then
!if (!upcase(!DoIRT)=Y) !then
!let !tablerbi = !concat(rbi_,!scale,"_",!ScoreType)
!else
!let !tablerbi = !concat(rbi_,!scale,"_pplus")
!ifend
!else
!let !tablerbi = !concat("rbi_",!head(!critvar))
!ifend

* This is for when there are no classification variables.
!if (!ncvar !eq 0) !then
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_ItemStats.sav")).
!if (!allcvars2 !ne !null) !then
variable level !allcvars (nominal).
!ifend
variable level Ncases(scale).
set tnumbers = labels.
CTABLES
  / vlabels variables = iseq item key reverse display=label
  / vlabels variables = Response !tablerbi display=label
  / vlabels variables = !do !crv !in(!critvars) !concat(CorrW_,!crv) !doend display = label
  / TABLE  iseq [c] > item [c] > key [c] > reverse [c]  
         by NCases [sum] + PPlus [mean] + 
              !do !crv !in(!critvars) !concat(CorrW_,!crv) [mean] + !doend Response [c] > p [mean] + Response [c] 
         > !tablerbi [mean]
  / slabels visible = no
  / CATEGORIES VARIABLES=iseq item key reverse !allcvars Response Order=A Key=Value empty=exclude
  / title corner  = '(Item Seq., Item Name, Key, Reverse)'
          title   = 'Summary Item Statistics'
        !if (!upcase(!timestamp) !eq Y) !then
          caption = '  ' !quote(!concat('Created )DATE at )TIME (Source: ',!unquote(!indir),'\',!upcase(!infile),'.sav)'))
        !ifend .

* This is to display graphics.
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_ItemStats4Graphs.sav")).
select if (NCases >= !GraphN !do !crv !in(!critvars) and upcase(rtrim(stat)) ne !quote(!upcase(!concat(CorrW_,!crv))) !doend).

!if (!upcase(!doirt) = Y !and !scale !ne !null) !then
select if (char.index(upcase(stat),"PPLUS") = 0).
!ifend

split file by !classvars ISeq ItemID.
graph / title "Proportion Choosing and Biserial Correlations by Response Option"
        !if (!upcase(!timestamp) !eq Y) !then
      / footnote =  !quote(!concat('Created @@current_month@@/@@current_day@@/@@current_YYYY@@ at @@current_hour@@:@@current_min@@:@@current_sec@@ @@current_ampm@@ (Source: "', !unquote(!indir), '\', !infile,'.sav")'))
        !ifend
      / bar(simple)=mean(value ) by response
      / panel colvar=stat2 .
split file off.
!ifend

* This is for when there are one or more classification variables.
!if (!ncvar !gt 0) !then
!let !keylist = !keys
!do !i = 1 !to !nitems.
!let !key = !head(!keylist)
*echo !quote(!concat('Keys is ',!key)).
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_ItemStats.sav")).
!if (!allcvars2 !ne !null) !then
variable level !allcvars (nominal).
!ifend
variable level Ncases(scale).
select if (ISeq = !i).
split file separate by ISeq ItemID.
set tnumbers = labels onumbers = labels.
CTABLES
  / vlabels variables = !allcvars display=name
  / vlabels variables = response !tablerbi display=label
  / vlabels variables = !do !crv !in(!critvars) !concat(CorrW_,!crv) !doend display=label
  / TABLE !head(!allcvars) !do !v !in (!tail(!allcvars)) > !v [c] !doend
         by NCases [sum] + PPlus [mean] + !if (!bv !ne !null !and !upcase(!doirt) = Y !and !scale !ne !null) !then RMSD [mean] + MD [mean] + !ifend
              !do !crv !in(!critvars) !concat(CorrW_,!crv) [mean] + !doend Response [c]> p [mean] + Response [c]
         > !tablerbi [mean]
  / slabels visible = no
  / CATEGORIES VARIABLES =  Response   Order=A Key=Value empty=exclude
  / title title   = 'Summary Item Statistics'
        !if (!upcase(!timestamp) !eq Y) !then
          caption = '  ' !quote(!concat('Created )DATE at )TIME (Source: ',!unquote(!indir),'\',!upcase(!infile),'.sav)'))
        !ifend 
    !if (!classvars !ne !null) !then
  / CATEGORIES VARIABLES = !classvars Order=A Key=label empty=exclude total=no
 !ifend
 !if (!bv !ne !null) !then
  / CATEGORIES VARIABLES=!bv Order=A Key=label empty=exclude total=no
 !ifend.

split file off.

* This is to display graphics.
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_ItemStats4Graphs.sav")).
select if (ISeq = !i).
select if (NCases >= !GraphN !do !crv !in(!critvars) and upcase(rtrim(stat)) ne !quote(!upcase(!concat(CorrW_,!crv))) !doend).

!if (!upcase(!doirt) = Y !and !scale !ne !null) !then
select if (char.index(upcase(stat),"PPLUS") = 0).
!ifend

split file by !classvars iseq ItemID.
!if (!bv !ne !null) !then
graph  / title = "Proportion Choosing and Biserial Correlations by Response Option"
         !if (!upcase(!timestamp) !eq Y) !then
       / footnote = '  ' !quote(!concat('Created @@current_month@@/@@current_day@@/@@current_YYYY@@ at @@current_hour@@:@@current_min@@:@@current_sec@@ @@current_ampm@@ (Source: "', !unquote(!indir), '\', !infile,'.sav")'))
         !ifend
       / bar(grouped)=mean(value ) by response by !bv
       / panel colvar=stat2.
!if (!upcase(!key) !ne D) !then
select if (char.index(upcase(stat),"CHOOSING") = 0).
graph  / title = "Biserial Correlations by Response Option"
         !if (!upcase(!timestamp) !eq Y) !then
       / footnote = '  ' !quote(!concat('Created @@current_month@@/@@current_day@@/@@current_YYYY@@ at @@current_hour@@:@@current_min@@:@@current_sec@@ @@current_ampm@@ (Source: "', !unquote(!indir), '\', !infile,'.sav")'))
         !ifend
       / line(multiple)=mean(value ) by response by !bv
       / panel colvar=stat2 .
!ifend
!else
graph  / title = "Proportion Choosing and Biserial Correlations by Response Option"
         !if (!upcase(!timestamp) !eq Y) !then
       / footnote = '  ' !quote(!concat('Created @@current_month@@/@@current_day@@/@@current_YYYY@@ at @@current_hour@@:@@current_min@@:@@current_sec@@ @@current_ampm@@ (Source: "', !unquote(!indir), '\', !infile,'.sav")'))
         !ifend
       / bar(simple)=mean(value ) by response 
       / panel colvar=stat2.
!if (!upcase(!key) !ne D) !then
select if (char.index(upcase(stat),"CHOOSING") = 0).
graph  / title = "Biserial Correlations by Response Option"
         !if (!upcase(!timestamp) !eq Y) !then
       / footnote = '  ' !quote(!concat('Created @@current_month@@/@@current_day@@/@@current_YYYY@@ at @@current_hour@@:@@current_min@@:@@current_sec@@ @@current_ampm@@ (Source: "', !unquote(!indir), '\', !infile,'.sav")'))
         !ifend
       / line(simple)=mean(value ) by response
       / panel colvar=stat2 .
!ifend
!ifend
split file off.

* This is to display DIF results.
!if (!upcase(!DoDIF) = Y !and !bv !ne !null) !then
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_DIF.sav")).
select if (ISeq = !i and Level > 0 and NCases >= !GraphN).

* use only the IRT based score when available.
!if (!upcase(!doirt) = Y !and !scale !ne !null) !then
select if (upcase(criteria) ne !upcase(!quote(!concat(!scale,'_pplus')))).
!ifend

aggregate outfile = * mode=addvariables
 / break = item
 / n = n(pplus).
if (n=0) pplus = 0.

split file by !classvars iseq ItemID.
graph / title = "Proportion Correct on the Item by Score Level on the Criterion Variable"
        !if (!upcase(!timestamp) !eq Y) !then
      / footnote =  '  ' !quote(!concat('Created @@current_month@@/@@current_day@@/@@current_YYYY@@ at @@current_hour@@:@@current_min@@:@@current_sec@@ @@current_ampm@@ (Source: ',!unquote(!indir),'\',!upcase(!infile),'.sav)'))
        !ifend
      / line(multiple)= mean(pplus) by Level by !bv
      / panel colvar = criteria.
split file off.
!ifend
!let !keylist = !tail(!keylist)
!doend
!ifend
!ifend

!if (!upcase(!clean) = Y) !then
echo "* * *".
echo "Erasing temporary files...".
echo "* * *".

!let !erasef = "ItemStats_tmp SumStats_tmp DescA DescB Desc2 DescA2 DescB2 Corr GroupValues GroupValues2 GroupValues3 GroupValues4 ResponseStats"
!do !ef !in(!erasef)
erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_",!ef,".sav")).
!doend

!if (!scale !ne !null) !then
*erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_Cronbach.sav")).
!ifend

!if (!upcase(!DoIRT) = Y !and (!scale !ne !null)) !then
*erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,!filetag,"_GroupMeans.sav")).
!ifend

!if (!upcase(!DoDIF) = Y !and !bv !ne !null) !then
!do !cv !in(!critvars)
erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_",!cv,!filetag,"_DifData.sav")).
!doend
!ifend

!ifend

!if (!upcase(!DoTables) = Y !and !upcase(!DoXLSX) = Y) !then
omsend tag = ['ctables1'].
!ifend
!if (!upcase(!DoTables) = Y !and !upcase(!DoHTML) = Y) !then
omsend tag = ['ctables2'].
!ifend

!doend

!if (!upcase(!clean) = Y) !then
erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Val_Labels.sav")).
erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Var_Labels.sav")).
erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Desc.sav")).

!if (!upcase(!DoIRT) = Y !and !upcase(!CtrDiff) = Y !and (!scale !ne !null)) !then
erase file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_IRTStatsShift.sav")).
!ifend

!ifend

* Clean up the file with scored responses.
get file = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Scored.sav"))
  / drop = !if (!allcv2 !ne !null) !then !allcv2 !ifend k.

add files
  / file = * 
  / keep = CaseSeq !idvars !keepvars !byvars !classvars !critvar !selvar !wgt
          !firstitem to !lastitem  !concat(!firstitem,"_s") to !concat(!lastitem,"_s")
          !concat(!firstitem,"_p") to !concat(!lastitem,"_p") all.

save outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Scored.sav")).
save translate outfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Scored.csv"))
  / replace / type = csv / fieldnames / encoding = 'LOCALE'.

output save
  outfile= !quote(!concat(!unquote(!outdir),"\",!outfile,"_Output.spv"))
  lock = no.

output export
  / contents export=visible layers=printsetting modelviews=printsetting
  / html documentfile = !quote(!concat(!unquote(!outdir),"\",!outfile,"_Output.htm"))
    notescaptions=yes interactlayers=no styling=yes imageformat=jpg
  / jpg percentsize=100 grayscale=no.

new file.

echo "* * *".
echo "Processing is completed. Please review the output.".
echo "* * *".

restore.

!enddefine.
